networks:
  projeto-person-registration:
    driver: bridge

services:
  postgres:
    image: postgres:latest
    container_name: postgres_api_person_registration
    restart: always
    environment:
      POSTGRES_DB: bd_apipersonregistration
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - projeto-person-registration
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d bd_apipersonregistration"]
      interval: 10s
      timeout: 5s
      retries: 5

  api_person_registration:
    image: jorgemeyrelles/api-person-registration:latest
    # build:
    #   context: ./apiPersonRegistration
    container_name: api_person_registration
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bd_apipersonregistration
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: root
    ports:
      - "8081:8080" # Porta 8081 no host mapeada para 8080 no container
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - projeto-person-registration

  mongodb:
    image: mongo:latest
    container_name: mongodb-container
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - projeto-person-registration

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - projeto-person-registration

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog_container
    ports:
      - "8025:8025"      # Web UI
      - "1025:1025"      # SMTP
    restart: always
    networks:
      - projeto-person-registration

  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - projeto-person-registration

# web-person-registration:
#   image: jorgemeyrelles/web-person-registration:latest
#   # build:
#   #   context: ./webPersonRegistration
#   #   dockerfile: Dockerfile
#   #   args:
#   #     VITE_API_BASE_URL: "http://localhost:8081"
#   #     VITE_NODE_ENV: "production"
#   #     NODE_ENV: "production"
#   container_name: web_person_registration
#   restart: always
#   ports:
#     - "3031:3031"
#   environment:
#     - NODE_ENV=production
#     - PORT=3031
#   depends_on:
#     - api_person_registration
#   networks:
#     - projeto-person-registration
#   healthcheck:
#     test: ["CMD", "curl", "-f", "http://localhost:3031/health"]
#     interval: 30s
#     timeout: 10s
#     retries: 3
#     start_period: 40s

volumes:
  postgres_data:
  mongodb_data:
